{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getCustomer","axios","get","apiPath","then","response","setState","customers","data","catch","error","console","log","getOrder","orders","state","className","style","height","float","width","this","map","day","_id","margin","top","right","bottom","left","stroke","dataKey","yAxisId","orientation","label","value","angle","dx","type","fill","barSize","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e2ccee08.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  ResponsiveContainer, ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nimport axios from 'axios';\n\nconst apiPath = \"http://localhost:8080\"\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orders: [\n        {\n            \"_id\": {\n                \"day\": 13\n            },\n            \"orderCount\": 2,\n            \"productCount\": 3,\n            \"productQuantity\": 6,\n            \"amount\": 3200\n        },\n        {\n            \"_id\": {\n                \"day\": 7\n            },\n            \"orderCount\": 1,\n            \"productCount\": 2,\n            \"productQuantity\": 5,\n            \"amount\": 2700\n        },\n        {\n            \"_id\": {\n                \"day\": 18\n            },\n            \"orderCount\": 1,\n            \"productCount\": 1,\n            \"productQuantity\": 4,\n            \"amount\": 2000\n        },\n        {\n            \"_id\": {\n                \"day\": 25\n            },\n            \"orderCount\": 3,\n            \"productCount\": 4,\n            \"productQuantity\": 9,\n            \"amount\": 4900\n        },\n        {\n            \"_id\": {\n                \"day\": 15\n            },\n            \"orderCount\": 1,\n            \"productCount\": 1,\n            \"productQuantity\": 5,\n            \"amount\": 3000\n        }\n    ],\n      customers: [\n        {\n          \"_id\": \"5f351f05a194f93730f50763\",\n          \"name\": \"karan\",\n          \"email\": \"karan.shaw9888@gmail.com\",\n          \"orderCount\": 6,\n          \"productCount\": 9,\n          \"productQuantity\": 22,\n          \"amount\": 11600\n        },\n        {\n          \"_id\": \"5f351f3ea194f93730f50769\",\n          \"name\": \"karan1\",\n          \"email\": \"karan1@gmail.com\",\n          \"orderCount\": 2,\n          \"productCount\": 2,\n          \"productQuantity\": 7,\n          \"amount\": 4200\n        },\n        {\n          \"_id\": \"5f351f3ea194f93730f5076a\",\n          \"name\": \"karan2\",\n          \"email\": \"karan2@gmail.com\",\n          \"orderCount\": 0,\n          \"productCount\": 0,\n          \"productQuantity\": 0,\n          \"amount\": 0\n        }\n      ]\n    }\n  }\n  componentDidMount() {\n    // this.getCustomer()\n    // this.getOrder()\n  }\n\n  getCustomer = () => {\n    axios.get(apiPath + '/customer')\n      .then(response => {\n        this.setState({ customers: response.data })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n  }\n\n  getOrder = () => {\n    axios.get(apiPath + '/order')\n      .then(response => {\n        this.setState({ orders: response.data })\n      })\n      .catch(error => {\n        console.log(\"error\", error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <style>\n          {`\n         .chart{\n           width: 50%;\n           margin-top: 50px;\n         }\n         @media screen and (max-width: 660px) {\n          .chart{\n            width: 100%;\n          }\n        }\n         `}\n        </style>\n        <div className=\"chart\" style={{ height: 400, float: 'left' }}>\n          <center><h4>Day Wise Chart</h4></center>\n          <ResponsiveContainer>\n            <ComposedChart\n              width={500}\n              height={400}\n              data={this.state.orders.map(data => {\n                return { ...data, day: data._id.day }\n              })}\n              margin={{\n                top: 20, right: 20, bottom: 20, left: 20,\n              }}\n            >\n              <CartesianGrid stroke=\"#f5f5f5\" />\n              <XAxis dataKey=\"day\" />\n              <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" label={{ value: 'Order, Product, Quantity', angle: -90, dx: -10 }} />\n              <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" label={{ value: 'Amount', angle: 90, dx: 30 }} />\n              <Tooltip />\n              <Legend />\n              <Area yAxisId=\"left\" type=\"monotone\" dataKey=\"orderCount\" fill=\"#8884d8\" stroke=\"#8884d8\" />\n              <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"productCount\" stroke=\"#413ea0\" />\n              <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"productQuantity\" stroke=\"#ff7300\" />\n              <Bar yAxisId=\"right\" dataKey=\"amount\" barSize={20} fill=\"#82ca9d\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"chart\" style={{ height: 400, float: 'right' }}>\n          <center><h4>Customer Wise Chart</h4></center>\n          <ResponsiveContainer>\n            <ComposedChart\n              width={500}\n              height={400}\n              data={this.state.customers}\n              margin={{\n                top: 20, right: 20, bottom: 20, left: 20,\n              }}\n            >\n              <CartesianGrid stroke=\"#f5f5f5\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" label={{ value: 'Order, Product, Quantity', angle: -90, dx: -10 }} />\n              <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" label={{ value: 'Amount', angle: 90, dx: 30 }} />\n              <Tooltip />\n              <Legend />\n              <Area yAxisId=\"left\" type=\"monotone\" dataKey=\"orderCount\" fill=\"#8884d8\" stroke=\"#8884d8\" />\n              <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"productCount\" stroke=\"#413ea0\" />\n              <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"productQuantity\" stroke=\"#ff7300\" />\n              <Bar yAxisId=\"right\" dataKey=\"amount\" barSize={20} fill=\"#82ca9d\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}